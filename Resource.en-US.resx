<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="absError1" xml:space="preserve">
    <value>Absolute error:</value>
  </data>
  <data name="absoluteErrorLabel" xml:space="preserve">
    <value>Absolute error:</value>
  </data>
  <data name="accuracyLabel" xml:space="preserve">
    <value>Accuracy:</value>
  </data>
  <data name="addBtn" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="addMsg" xml:space="preserve">
    <value>Point added </value>
  </data>
  <data name="appNumber" xml:space="preserve">
    <value>Approximate number</value>
  </data>
  <data name="approxfuncBnt" xml:space="preserve">
    <value>Approximation Function</value>
  </data>
  <data name="approxFuncTask1Task" xml:space="preserve">
    <value>Write and run a computer application that, based on the data from the following table:
i   xi   yi
1   2    2.5
2   4    10
3   6    32
4   8    40
5   10   60
will find the linear approximating function.</value>
  </data>
  <data name="approxFuncTitle" xml:space="preserve">
    <value>Aproximation Functions</value>
  </data>
  <data name="approximationsBtn" xml:space="preserve">
    <value>Approximations</value>
  </data>
  <data name="approxTitle" xml:space="preserve">
    <value>Approximations</value>
  </data>
  <data name="appValue1" xml:space="preserve">
    <value>Approximate value:</value>
  </data>
  <data name="backBtn" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="backwardBtn" xml:space="preserve">
    <value>Backward differences</value>
  </data>
  <data name="backwardTitle" xml:space="preserve">
    <value>Backward differences</value>
  </data>
  <data name="calculateBtn" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="coefficientsLabel" xml:space="preserve">
    <value>Coefficients:</value>
  </data>
  <data name="column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="different" xml:space="preserve">
    <value>Different</value>
  </data>
  <data name="differentiationBtn" xml:space="preserve">
    <value>Differentiation</value>
  </data>
  <data name="differentiationTask" xml:space="preserve">
    <value>Write and run a computer application that takes at least four pairs of points (x, f(x)), then calculates:
Progressive differences,
Backward differences,
Divided differences
between the corresponding pairs of points. If performing these operations is not possible, the program should inform the user about it.</value>
  </data>
  <data name="differentiationTitle" xml:space="preserve">
    <value>Differentiation</value>
  </data>
  <data name="dividedBtn" xml:space="preserve">
    <value>Divided differences</value>
  </data>
  <data name="dividedMsg" xml:space="preserve">
    <value>Quotient </value>
  </data>
  <data name="dividedTitle" xml:space="preserve">
    <value>Divided differences</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="errorMsg" xml:space="preserve">
    <value>Invalid x or y values. Check the entered data.</value>
  </data>
  <data name="exNumber" xml:space="preserve">
    <value>Exact number: </value>
  </data>
  <data name="formTitle" xml:space="preserve">
    <value>Introduction to Numerical Methods</value>
    <comment>Computer Application</comment>
  </data>
  <data name="integrationsBtn" xml:space="preserve">
    <value>Integrations</value>
  </data>
  <data name="integrationsTask" xml:space="preserve">
    <value>Write and run a computer application that calculates the definite integral of a polynomial W(x) of at least the third degree defined on a given interval [a, b] using three methods:
1. Rectangle method,
2. Trapezoidal method,
3. Parabolic method,
with a specified level of accuracy. Compare and analyze the obtained results and the efficiency of these methods (e.g., the number of iterations required to achieve the desired accuracy).</value>
  </data>
  <data name="integrationsTitle" xml:space="preserve">
    <value>Integrations</value>
  </data>
  <data name="interLabel" xml:space="preserve">
    <value>Interpolating polynomial:</value>
  </data>
  <data name="interpolationsBtn" xml:space="preserve">
    <value>Interpolations</value>
  </data>
  <data name="interpolationTitle" xml:space="preserve">
    <value>Interpolations</value>
  </data>
  <data name="interTaskText" xml:space="preserve">
    <value>Write and run a computer application that, based on four pairs of values (x, f(x)), finds the third-degree interpolating polynomial approximating this function f(x). If performing this operation is not possible, the program should inform the user about it.</value>
  </data>
  <data name="invalidValues" xml:space="preserve">
    <value>Invalid values</value>
  </data>
  <data name="iterationsTxt" xml:space="preserve">
    <value>Iterations number:</value>
  </data>
  <data name="languageBtn" xml:space="preserve">
    <value>Change language</value>
  </data>
  <data name="notEnoughtMsg" xml:space="preserve">
    <value>You need at least two points for progressive differences calculations.</value>
  </data>
  <data name="notEnoughtMsg2" xml:space="preserve">
    <value>You need at least 4 points.</value>
  </data>
  <data name="overestimationText" xml:space="preserve">
    <value>Overstimination:</value>
  </data>
  <data name="parabolicMethodBtn" xml:space="preserve">
    <value>Parabolic method</value>
  </data>
  <data name="parabolicTitle" xml:space="preserve">
    <value>Parabolic method</value>
  </data>
  <data name="pointsLabel" xml:space="preserve">
    <value>Point:</value>
  </data>
  <data name="progressiveBtn" xml:space="preserve">
    <value>Progressive differences</value>
  </data>
  <data name="progressiveTitle" xml:space="preserve">
    <value>Progressive differences</value>
  </data>
  <data name="quotientsMsg" xml:space="preserve">
    <value>Difference quotients</value>
  </data>
  <data name="rectangleMethodBtn" xml:space="preserve">
    <value>Rectangle method</value>
  </data>
  <data name="rectangleTitle" xml:space="preserve">
    <value>Rectangle method</value>
  </data>
  <data name="relativeErrorLabel" xml:space="preserve">
    <value>Relative error:</value>
  </data>
  <data name="resultLabel" xml:space="preserve">
    <value>Result:</value>
  </data>
  <data name="resultTextLabel" xml:space="preserve">
    <value>Result:</value>
  </data>
  <data name="resultTxt" xml:space="preserve">
    <value>Integral value:</value>
  </data>
  <data name="task11Btn" xml:space="preserve">
    <value>Task 1</value>
  </data>
  <data name="task11Task" xml:space="preserve">
    <value>Write and run a computer application calculating the relative and absolute error after entering two numbers: the exact one and the approximate one.</value>
  </data>
  <data name="task12Btn" xml:space="preserve">
    <value>Task 2</value>
  </data>
  <data name="task12Task" xml:space="preserve">
    <value>Write and run a computer application that finds the exact value of a number if we enter its approximate value and its absolute error for two cases:
1. The number is underestimated.
2. The number is overestimated.</value>
  </data>
  <data name="Task31Task" xml:space="preserve">
    <value>Write and run a computer application that, based on the following data:
(0.955, 5.722), (1.38, 4.812), (1.854, 4.727), (2.093, 4.850), (2.674, 5.011), (3.006, 5.253), (3.255, 5.617), (3.940, 6.282), (4.060, 6.255),
using the following basic functions: 1/x, x, x^2, will find the approximative function.</value>
  </data>
  <data name="trapezoidalMethodBtn" xml:space="preserve">
    <value>Trapezoidal method</value>
  </data>
  <data name="trapezTitle" xml:space="preserve">
    <value>Trapezodial method</value>
  </data>
  <data name="underestimationText" xml:space="preserve">
    <value>Understimination: </value>
  </data>
  <data name="wrongXYMsg" xml:space="preserve">
    <value>Enter correct values for x and y</value>
  </data>
</root>